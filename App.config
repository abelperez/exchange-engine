<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <!--
      ========================================================
      Spring.NET (IOC/AOP) Framework
      ========================================================
    -->
    <sectionGroup name="spring">
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core"/>
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core"/>
    </sectionGroup>
    <!--
      ========================================================
      Enterprise Library Data Application Block 4.0
      ========================================================
    -->
    <section name="dataConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings, Microsoft.Practices.EnterpriseLibrary.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    <!--
      ========================================================
      Log4net.
      ========================================================
    -->
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />

  </configSections>
  <!--
      ===========================
      Database Connection Strings
      ===========================
    -->
  <connectionStrings>
    <add name="Exchange" connectionString="Data Source=localhost;Initial Catalog=Exchange;User ID=alxdev;Password=" providerName="System.Data.SqlClient"/>
    <add name="Geo" connectionString="Data Source=localhost;Initial Catalog=Geo;User ID=sa;Password=" providerName="System.Data.SqlClient"/>
  </connectionStrings>
  <!--
	  ============================
		 Spring.NET
		============================
	-->
  <spring>
    <context>
      <resource uri="config://spring/objects"/>
    </context>
    <objects xmlns="http://www.springframework.net">
      <description>Exchange Acquisition</description>
      <!-- 
        ============================
			    Data Access.                            
			  ============================
			-->
      <!-- Exchange -->
      <object name="ExchangeDataAccess" singleton="true" type="Exchange.DataAccess.ExchangeDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <!-- Verticals -->
      <object name="DebtDataAccess" singleton="true" type="Exchange.Debt.DataAccess.DebtDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <!-- Delivery -->
      <object name="DeliveryQueueDataAccess" singleton="true" type="Exchange.Delivery.DataAccess.DeliveryQueueDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <!-- Duplicate -->
      <object name="DuplicateDataAccess" singleton="true" type="Exchange.Duplicate.DataAccess.DuplicateDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <!-- Distance -->
      <object name="DistanceDataAccess" singleton="true" type="Exchange.Distance.DataAccess.DistanceDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <object name="RadiusDataAccess" singleton="true" type="Exchange.Distance.DataAccess.DistanceDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <!-- Impound -->
      <object name="ImpoundDataAccess" singleton="true" type="Exchange.Impound.DataAccess.ImpoundDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <!-- Vintage -->
      <object name="VintageLeadDataAccess" singleton="true" type="Exchange.Vintage.DataAccess.VintageLeadDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <!-- Allocation -->
      <object name="AllocationDataAccess" singleton="true" type="Exchange.Pricing.DataAccess.AllocationDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <object name="AcquisitionValidatorDataAccess" singleton="true" type="Exchange.Validation.DataAccess.AcquisitionValidatorDataAccess, Exchange" init-method="init">
        <property name="databaseInstance">
          <value>Exchange</value>
        </property>
      </object>
      <!-- 
        ============================
			    Exchange Service.                            
			  ============================
			-->
      <object name="ServiceContext" singleton="true" type="Exchange.Service.StandardServiceContext, Exchange">
        <property name="ExchangeDataAccess" ref="ExchangeDataAccess" />
        <property name="DuplicateDataAccess" ref="DuplicateDataAccess" />
        <property name="DebtDataAccess" ref="DebtDataAccess" />
        <property name="DeliveryQueueDataAccess" ref="DeliveryQueueDataAccess" />
        <property name="DistanceDataAccess" ref="DistanceDataAccess" />
        <property name="VintageLeadDataAccess" ref="VintageLeadDataAccess" />
        <property name="AllocationDataAccess" ref="AllocationDataAccess" />
        <property name="ImpoundDataAccess" ref="ImpoundDataAccess" />
      </object>
      <object name="ExchangeService" singleton="true" type="Exchange.Service.ExchangeService, Exchange">
        <property name="ServiceContext" ref="ServiceContext" />
      </object>
    <!-- 
        ============================
			    Exchange Engine.                            
			  ============================
			-->
      <object name="ExchangeEngine" singleton="true" type="Exchange.Engine.ExchangeEngine, Exchange.Engine" />
      <object name="DebtLeadStrategy" singleton="true" type="Exchange.Engine.Strategy.DebtLeadStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="DistanceStrategy" singleton="true" type="Exchange.Engine.Strategy.DistanceStrategy, Exchange.Engine">
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="PricingStrategy" singleton="true" type="Exchange.Engine.Strategy.PricingStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="LeadPersistStrategy" singleton="true" type="Exchange.Engine.Strategy.LeadPersistStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="PricingStrategy" singleton="true" type="Exchange.Engine.Strategy.PricingStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="VintageStrategy" singleton="true" type="Exchange.Engine.Strategy.VintageStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="InboundDuplicateStrategy" singleton="true" type="Exchange.Engine.Strategy.InboundDuplicateStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
        <property name="RetryCount">
          <value>3</value>
        </property>
      </object>
      <object name="ImpoundStrategy" singleton="true" type="Exchange.Engine.Strategy.ImpoundStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="OutboundDuplicateStrategy" singleton="true" type="Exchange.Engine.Strategy.OutboundDuplicateStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="DistributionStrategy" singleton="true" type="Exchange.Engine.Strategy.DistributionStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="EmailTransformerStrategy" singleton="true" type="Exchange.Engine.Strategy.TransformerStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
        <property name="Template">
          <value>SoapMessage.xsl</value>
        </property>
        <property name="ResultKey">
          <value>HTML_REPORT</value>
        </property>
      </object>
      <object name="NotificationStrategy" singleton="true" type="Exchange.Engine.Strategy.NotificationStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
        <property name="DataKey">
          <value>HTML_REPORT</value>
        </property>
        <property name="Host">
          <value>devmystique</value>
        </property>
        <property name="From">
          <value>aperez@webyes.com</value>
        </property>
        <property name="Recipient">
          <value>aperez@webyes.com</value>
        </property>
        <property name="Subject">
          <value>Exchange Runtime Report</value>
        </property>
      </object>
      <object name="SaverStrategy" singleton="true" type="Exchange.Engine.Strategy.SaverStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
        <property name="Context">
          <value>delivery</value>
        </property>
        <property name="Status">
          <value>pending</value>
        </property>
      </object>
      <object name="MessageGatewayStrategy" singleton="true" type="Exchange.Engine.Strategy.MessageGatewayStrategy, Exchange.Engine" >
        <property name="ExchangeService" ref="ExchangeService" />
        <property name="Destination">
          <value>exchange.delivery.engine</value>
        </property>
      </object>
      <object name="LeadValidationStrategy" singleton="true" type="Exchange.Engine.Strategy.LeadValidationStrategy, Exchange.Engine">
        <property name="ExchangeService" ref="ExchangeService" />
      </object>
      <object name="DispositionTrackerStrategy" singleton="true" type="Exchange.Engine.Strategy.DispositionTrackerStrategy, Exchange.Engine">
        <property name="ExchangeService" ref="ExchangeService" />
        <property name="DataKey">
          <value>HTML_REPORT</value>
        </property>
      </object>
      <object name="AllocationModule" singleton="false" type="Exchange.Engine.Module.AllocationModule, Exchange.Engine" />
      <object name="ExchangeRuntime" singleton="false" type="Exchange.Engine.ExchangeRuntime, Exchange.Engine" init-method="Init">    
        <property name="strategies">
          <list>
            <ref object="DebtLeadStrategy"/>
            <ref object="LeadValidationStrategy"/>
            <!--<ref object="InboundDuplicateStrategy"/>-->
            <ref object="ImpoundStrategy" />
            <ref object="LeadPersistStrategy" />
            <ref object="DistanceStrategy" />
            <ref object="OutboundDuplicateStrategy"/>
            <ref object="PricingStrategy"/>
            <ref object="VintageStrategy"/>
            <ref object="DistributionStrategy"/>
            <ref object="SaverStrategy" />
            <ref object="MessageGatewayStrategy" />
            <ref object="EmailTransformerStrategy" />
            <ref object="NotificationStrategy" />
            <ref object="DispositionTrackerStrategy" />
          </list>
        </property>
        <property name="modules">
          <list>
            <ref object="AllocationModule"/>
          </list>
        </property>
      </object>
      <object name="SystemExchangeRuntime" singleton="false" type="Exchange.Engine.ExchangeRuntime, Exchange.Engine" init-method="Init">
        <property name="strategies">
          <list>
            <ref object="SaverStrategy" />
            <ref object="MessageGatewayStrategy" />
            <ref object="EmailTransformerStrategy" />
            <ref object="NotificationStrategy" />
          </list>
        </property>
        <property name="modules">
          <list>
            <ref object="AllocationModule"/>
          </list>
        </property>
      </object>
      <!--
	    ============================
		    Adapters
		  ============================
	    -->
      <object name="ExchangeAdapter" singleton="true" type="Exchange.Acquisition.ExchangeAdapter, Exchange.Engine">
        <property name="ExchangeEngine" ref="ExchangeEngine" />
        <!--
        <property name="AcquisitionTracker" ref="AcquisitionAsyncTracker" />
        -->
      </object>
    </objects>
  </spring>
  <!--
    =============================
      LOG4NET
    =============================
  -->
  <log4net>
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
      </layout>
    </appender>
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <file value="ExchangeAcquisition.log" />
      <appendToFile value="true" />
      <maxSizeRollBackups value="10" />
      <maximumFileSize value="10MB" />
      <rollingStyle value="Size" />
      <staticLogFileName value="true" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date - %-5level %logger - %message%newline" />
      </layout>
    </appender>
    <root>
      <level value="DEBUG" />
      <appender-ref ref="ConsoleAppender" />
      <appender-ref ref="RollingLogFileAppender" />
    </root>
  </log4net>
</configuration>